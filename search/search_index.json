{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to My Sharing","text":""},{"location":"about-me.html","title":"About Me","text":""},{"location":"about-me.html#introduction","title":"Introduction","text":"<p>Hello! I'm Crystal Chen, a Free Researcher based in Taipei, Taiwan. I'm passionate about Document AI, and I love to Playing Golf, Cello, and Moss Planting.</p>"},{"location":"about-me.html#professional-background","title":"Professional Background","text":"<p>I have over 30 years of experience in Document Output Processing, specializing in Document Processing Automation. My journey in this field began [Brief Story or Motivation], and since then, I've been dedicated to [Your Professional Goals or Mission].</p>"},{"location":"about-me.html#key-skills","title":"Key Skills","text":"<ul> <li>[Skill 2]</li> <li>[Skill 3]</li> <li>[Skill 4]</li> </ul>"},{"location":"about-me.html#education","title":"Education","text":"<ul> <li>BS in Electrical Engineering Departmentof National Tsing Hua University, 1980-1983</li> </ul>"},{"location":"about-me.html#projects-and-achievements","title":"Projects and Achievements","text":"<ul> <li>[Notable Project or Achievement 1]</li> <li>[Notable Project or Achievement 2]</li> <li>[Notable Project or Achievement 3]</li> </ul>"},{"location":"about-me.html#personal-interests","title":"Personal Interests","text":"<p>Outside of my professional life, I enjoy:</p> <ul> <li>Golf</li> <li>Cello</li> <li>Moss Planting</li> </ul>"},{"location":"about-me.html#connect-with-me","title":"Connect with Me","text":"<p>Feel free to connect with me on:</p> <ul> <li>[LinkedIn Profile]</li> <li>[GitHub Profile]</li> <li>[Twitter Handle]</li> <li>[Personal Website/Blog]</li> </ul> <p>I'm always open to interesting conversations and collaboration opportunities. Don't hesitate to reach out!</p>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html","title":"Build a Multi-language Website with Mkdocs Material Theme","text":"<p>In this post, I'll share my experience of building a multi-language documentation website using MkDocs with the Material theme. This approach is perfect for maintaining separate but parallel documentation in multiple languages, ensuring a smooth experience for diverse audiences.</p> <p>English</p> <p></p> <p>\u6b63\u9ad4\uff08\u7e41\u9ad4\uff09\u4e2d\u6587</p> <p></p>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#demo-site","title":"Demo Site","text":"<p>You can see a live demo of this multi-language documentation setup at: https://crystalhhc.github.io/myDocs/</p> <p>Feel free to explore the demo to get a better understanding of how the final product looks and functions.</p>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#why-separate-projects-instead-of-i18n-plugins","title":"Why Separate Projects Instead of i18n Plugins?","text":"<p>You might wonder why we're creating separate projects for each language instead of using internationalization (i18n) plugins like mkdocs-static-i18n in a single project. Here are the key reasons:</p> <ol> <li> <p>Simplicity and Flexibility: Managing separate projects for each language allows for greater flexibility in content structure and customization. Each language version can evolve independently if needed.</p> </li> <li> <p>Performance: With separate projects, each language version is built as a standalone site, which can lead to faster build times and better performance, especially for large documentation sets.</p> </li> <li> <p>Plugin Compatibility: Some MkDocs plugins, particularly the blog plugin we're using, may not be fully compatible with i18n plugins. Using separate projects ensures full functionality of all desired features.</p> </li> <li> <p>Easier Content Management: For teams with different people managing different language versions, separate projects can make it easier to assign responsibilities and manage workflows.</p> </li> <li> <p>Alignment with MkDocs Philosophy: The creator of MkDocs Material, Martin Donath, recommends this approach for multi-language setups, stating that \"MkDocs is designed for building a single documentation in a single language.\"</p> </li> </ol> <p>While using i18n plugins can be suitable for some projects, especially those with simpler structures or where maintaining strict parity between language versions is crucial, our approach offers more flexibility and robustness for complex, evolving documentation needs.</p>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#project-layout","title":"Project Layout","text":"<p>Our goal is to create a documentation site with both <code>English</code> and <code>Traditional Chinese</code> versions. Here's the basic project structure we'll be working with: <pre><code>myDocs/\n\u251c\u2500\u2500 .venv/                 # Virtual environment directory\n\u251c\u2500\u2500 mydocs-en/             # English documentation project\n\u2502   \u251c\u2500\u2500 docs/\n\u2502   \u2502   \u251c\u2500\u2500 index.md       # The documentation homepage (English)\n\u2502   \u2502   \u2514\u2500\u2500 ...            # Other markdown pages and files\n\u2502   \u2514\u2500\u2500 mkdocs.yml         # Configuration file for English docs\n\u251c\u2500\u2500 mydocs-zh-TW/          # Traditional Chinese documentation project\n\u2502   \u251c\u2500\u2500 docs/\n\u2502   \u2502   \u251c\u2500\u2500 index.md       # The documentation homepage (Traditional Chinese)\n\u2502   \u2502   \u2514\u2500\u2500 ...            # Other markdown pages and files\n\u2502   \u2514\u2500\u2500 mkdocs.yml         # Configuration file for Traditional Chinese docs\n\u2514\u2500\u2500 README.md              # Project overview and instructions\n</code></pre></p>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#quick-start-clone-the-sample-repository","title":"Quick Start: Clone the Sample Repository","text":"<p>If you want to get started quickly with a working example, you can clone my sample repository directly from GitHub. This repository contains a fully set up multi-language MkDocs project with both English and Traditional Chinese versions.</p> <p>To clone the repository:</p> <ol> <li>Open your terminal.</li> <li>Navigate to the directory where you want to clone the project.</li> <li>Run the following command: <pre><code>git clone https://github.com/Crystalhhc/myDocs.git\n</code></pre></li> <li>Once cloned, navigate into the project directory: <pre><code>cd myDocs\n</code></pre></li> <li>Set up a virtual environment and install the required dependencies: <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n</code></pre> Now you have a working multi-language MkDocs project! You can start exploring the structure, making changes, and seeing how everything works together. To serve the documentation locally:</li> </ol> English VersionTraditional Chinese Version <pre><code>cd mydocs-en\nmkdocs serve -a localhost:8000\n</code></pre> <pre><code>cd mydocs-zh-TW\nmkdocs serve -a localhost:8001\n</code></pre> <p>Information</p> <p><code>-a localhost:8000</code>: This is an option that specifies the address and  port on which the server should run  .</p> <p>Visit the following URLs in your web browser to view the documentation:</p> <ul> <li>English: http://localhost:8000</li> <li>Traditional Chinese: http://localhost:8001</li> </ul> <p>This sample repository provides a great starting point for your own multi-language documentation projects. You can now easily switch between languages in your local development environment. Feel free to modify and expand upon it to suit your needs.</p> <p>In the following sections, we'll go through the process of setting up such a project from scratch, which will give you a deeper understanding of how everything works.</p>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#set-up-from-scratch","title":"Set Up from Scratch","text":"<ol> <li>Create the project root directory: <pre><code>mkdir myDocs\ncd myDocs\n</code></pre></li> <li>Set up a virtual environment: <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre></li> <li>Install MkDocs Material: <pre><code>pip install mkdocs-material\n</code></pre></li> </ol>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#creating-language-specific-projects","title":"Creating Language-Specific Projects","text":"EnglishTraditional Chinese ~/myDocs/<pre><code>mkdocs new mydocs-en\n</code></pre> ~/myDocs/<pre><code>mkdocs new mydocs-zh-TW\n</code></pre>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#developing-multiple-language-versions","title":"Developing Multiple Language Versions","text":"<p>To work on both language versions simultaneously, you'll need to run two separate server instances. Here's how to do it:</p> <ol> <li>Open two terminal windows or tabs.</li> <li>In each terminal, navigate to the project root directory and activate the virtual environment.</li> <li>Then, start a server for each language version as follows:</li> </ol> Terminal 1 - EnglishTerminal 2 - Traditional Chinese ~/myDocs/<pre><code>cd mydocs-en\nsources .venv/bin/activate # to make sure you are currently in the virtual environment\nmkdocs serve -a localhost:8000\n</code></pre> ~/myDocs/<pre><code>cd mydocs-zh-TW\nsources .venv/bin/activate\nmkdocs serve -a localhost:8001\n</code></pre> <p>This setup allows you to view and edit both language versions in real-time, ensuring consistency across your multi-language documentation. You can access:</p> <ul> <li>English:  <code>http://localhost:8000</code></li> <li>Traditional Chinese: <code>http://localhost:8001</code> </li> </ul> <p>in your web browser.</p>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#configuring-mkdocsyml-for-each-language","title":"Configuring <code>mkdocs.yml</code> for Each Language","text":"<p>For each language version, you need to configure the <code>mkdocs.yml</code> file separately. Here's an example for both English and Traditional Chinese:</p> EnglishTraditional Chinese ./mydocs-en/mkdocs.yml<pre><code>site_name: My Docs - English\nsite_url: https://crystalhhc.github.io/myDocs/ # set English as default language\nuse_directory_urls: false\ntheme:\n  name: material\n  language: en\nextra:\n  alternate: # Language switcher\n    - name: English\n      link: https://crystalhhc.github.io/myDocs/ # English as    default\n      lang: en\n    - name: \u6b63\u9ad4\u4e2d\u6587\n      link: https://crystalhhc.github.io/myDocs/zh-TW/\n      lang: zh-TW\n</code></pre> ./mydocs-zh-TW/mkdocs.yml<pre><code>site_name: \u6211\u7684\u6587\u6a94\nsite_url: https://crystalhhc.github.io/myDocs/zh-TW/\ntheme:\n  name: material\n  language: zh-TW\nextra:\n  alternate: # Language switcher\n    - name: English\n      link: https://crystalhhc.github.io/myDocs/ # English as default language\n      lang: en\n    - name: \u6b63\u9ad4\u4e2d\u6587\n      link: https://crystalhhc.github.io/myDocs/zh-TW/\n      lang: zh-TW\n</code></pre> <p>Information</p> <p>Language Selection Settings: <pre><code>extra:\n  alternates:\n    - name: Language\n      link:\n      lang:\n</code></pre></p> <ul> <li><code>name</code>: Language name</li> <li><code>link</code>: Absolute url to the language site.</li> <li><code>lang</code>: an ISO 639-1 language code</li> </ul>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#nav-tab-setting","title":"Nav Tab Setting","text":"EnglishTraditional Chinese ./mydocs-en/mkdocs.yml<pre><code>nav:\n  - Home: index.md\n  - Projects:\n    - projects/index.md\n    - OCR: ocr/index.md\n  - OCR: \n    - Introductions: ocr/introduction.md\n    - Roadmap: ocr/roadmap.md\n    - Features: ocr/features.md\n  - Blog: blog/index.md\n  - Tags: tags.md\n</code></pre> ./mydocs-zh-TW/mkdocs.yml<pre><code>nav:\n  - \u9996\u9801: \n      index.md\n  - \u8a08\u5283:\n      - \u8a08\u5283\u6982\u89bd: \n          projects/index.md\n      - OCR: \n          ocr/index.md\n  - OCR: \n      - \u6982\u62ec: \n          ocr/index.md\n      - \u4ecb\u7d39: \n          ocr/introduction.md\n      - \u8def\u7dda\u5716: \n          ocr/roadmap.md\n      - \u7279\u9ede: \n          ocr/features.md\n  - \u6587\u7ae0:  # can not affect\n      blog/index.md \n  - \u6a19\u7c64: \n      tags.md \n</code></pre>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#the-final-project-layout","title":"The Final Project Layout","text":"<pre><code>myDocs/\n\u251c\u2500\u2500 .venv/                 # Virtual environment directory\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 deploy-docs.yml  # GitHub Actions workflow file\n\u251c\u2500\u2500 mydocs-en/             # English documentation project\n\u2502   \u251c\u2500\u2500 docs/\n\u2502   \u2502   \u251c\u2500\u2500 index.md       # The documentation homepage (English)\n\u2502   \u2502   \u251c\u2500\u2500 tags.md\n\u2502   \u2502   \u251c\u2500\u2500 blog/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 posts/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 first-post.md\n\u2502   \u2502   \u251c\u2500\u2500 ocr/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 introduction.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 roadmap.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 features.md\n\u2502   \u2502   \u2514\u2500\u2500 projects/\n\u2502   \u2502       \u2514\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 mkdocs.yml         # Configuration file for English docs\n\u251c\u2500\u2500 mydocs-zh-TW/          # Traditional Chinese documentation project\n\u2502   \u251c\u2500\u2500 docs/\n\u2502   \u2502   \u251c\u2500\u2500 index.md       # The documentation homepage (Traditional Chinese)\n\u2502   \u2502   \u251c\u2500\u2500 tags.md\n\u2502   \u2502   \u251c\u2500\u2500 blog/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 posts/\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 first-post.md\n\u2502   \u2502   \u251c\u2500\u2500 ocr/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 introduction.md\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 roadmap.md\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 features.md\n\u2502   \u2502   \u2514\u2500\u2500 Projects/\n\u2502   \u2502       \u2514\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 mkdocs.yml         # Configuration file for Traditional Chinese docs\n\u251c\u2500\u2500 README.md              # Project overview and instructions\n\u251c\u2500\u2500 requirements.txt       # Python package requirements\n\u2514\u2500\u2500 .gitignore             # Git ignore file\n</code></pre>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#syncing-with-github","title":"Syncing with GitHub","text":"<p>To sync your project with GitHub:</p> <ol> <li>Initialize Git in the <code>root</code> directory:  <pre><code>cd ~/myDocs\nsource .venv/bin/activate # make sure you are keeping in the virtual environment\ngit init\n</code></pre></li> <li>Create a .gitignore file: <pre><code>touch .gitignore\n</code></pre></li> <li>Add and commit your files: <pre><code>git add .\ngit commit -m \"Initial commit\"\n</code></pre></li> <li>Create a new repository on GitHub (let's call it <code>myDocs</code>)</li> <li>Link your local repository to GitHub and push: <pre><code>git branch -M main\ngit remote add origin https://github.com/YOUR_USERNAME/YOUR_REPO_NAME.git\ngit push -u origin main\n</code></pre></li> </ol>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#deploying-to-github-pages","title":"Deploying to GitHub Pages","text":"<p>To deploy your documentation to GitHub Pages:</p> <ol> <li>Ensure your <code>mkdocs.yml</code> files are configured with the correct <code>site_url</code> as shown in the configuration examples above.</li> <li>Create a <code>gh-pages</code> branch: <pre><code>git checkout --orphan gh-pages\ngit rm -rf .\ngit commit --allow-empty -m \"Initial gh-pages commit\"\ngit push origin gh-pages\n</code></pre></li> <li>Switch back to the main branch: <pre><code>git checkout main\n</code></pre></li> <li>Build and deploy your documentation: <pre><code>cd ~/myDocs/mydocs-en\nmkdocs gh-deploy --force\n\ncd ~/myDocs/mydocs-zh-TW\nmkdocs gh-deploy --force\n</code></pre></li> <li> <p>In your GitHub repository settings, go to the \"Pages\" section and set the source to the <code>gh-pages</code> branch. This is an <code>important</code> step that is often overlooked.</p> <ol> <li>Go to your GitHub repository.</li> <li>Click on <code>Settings</code> in the top menu.</li> <li>In the left sidebar, click on <code>Pages</code>.</li> <li>Under <code>Source</code>, select <code>Deploy from a branch</code>.</li> <li>In the <code>Branch</code> dropdown, select <code>gh-pages</code>.</li> <li>Make sure the folder is set to <code>/ (root)</code>.</li> <li>Click <code>Save</code>.</li> </ol> </li> </ol> <p></p> <p>Note</p> <p>Check Repository Permissions:</p> <ul> <li>Go to your GitHub repository's settings, then to <code>Actions</code> under <code>Code and automation</code> in the left sidebar. </li> <li>Make sure <code>Read and write permissions</code> is selected under <code>Workflow permissions</code>.</li> </ul> <p></p>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#defining-github-actions-workflow","title":"Defining GitHub Actions Workflow","text":"<p>To eliminate the need for manual intervention each time you update your documentation, let's design an automated deployment process by creating a <code>GitHub Actions</code> workflow:</p> <ol> <li>Create a <code>.github/workflows</code> directory in your repository: <pre><code>mkdir -p .github/workflows\n</code></pre></li> <li>Create a file named <code>deploy-docs.yml</code> in this directory: <pre><code>touch .github/workflows/deploy-docs.yml\n</code></pre></li> <li>Add the following content to <code>deploy-docs.yml</code>: deploy-docs.yml<pre><code>name: Deploy MkDocs\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-22.04  # Explicitly specify Ubuntu 22.04\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install mkdocs-material\n\n      - name: Build English docs\n        run: |\n          cd mydocs-en\n          mkdocs build --site-dir ../site\n\n      - name: Build Chinese docs\n        run: |\n          cd mydocs-zh-TW\n          mkdocs build --site-dir ../site/zh-TW\n\n      - name: Create .nojekyll file\n        run: touch site/.nojekyll\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./site\n          force_orphan: true\n</code></pre></li> </ol> <p>Informaiton</p> <p>Let's explain the details of the above configuration:</p> <ol> <li> <p>Title of this workflow</p> <ul> <li><code>name</code>: Deploy MkDocs - This is the name of the workflow.</li> </ul> </li> <li> <p>Note that this must be an absolute link. If it includes a domain part, it's     used as defined. Otherwise the domain part of the [<code>site_url</code>][site_url] as     set in <code>mkdocs.yml</code> is prepended to the link.</p> </li> <li> <p>Event Trigger:</p> <ul> <li><code>on</code>: This section defines when the workflow should run.</li> <li><code>push</code>: The workflow will trigger on push events.</li> <li><code>branches: [main]</code>: It will only run when changes are pushed to the <code>main</code> branch.</li> </ul> </li> <li>Job Trigger:<ul> <li><code>jobs</code>: This section defines the jobs that will run as part of this workflow.</li> <li><code>deploy</code>: This is the name of the job.</li> <li><code>runs-on: ubuntu-22.04</code>: This specifies that the job will run on an <code>Ubuntu 22.04</code> runner.</li> </ul> </li> <li> <p>Steps Description:    <code>steps</code>: This section lists the steps that will be executed in the job.</p> <ul> <li>step 1 - <code>uses: actions/checkout@v3</code>: To check out your repository so the workflow can access it.</li> <li> <p>step 2. - <code>name: Set up Python</code>: To sets up Python environment.</p> <ul> <li>It uses the <code>actions/setup-python@v4</code> action to set up <code>Python 3.x</code>.</li> </ul> </li> <li> <p>step 3 - <code>name: Install dependencies</code>: To install the necessary Python packages.</p> <ul> <li>It upgrades <code>pip</code> and installs <code>mkdocs-material</code>.</li> </ul> </li> <li> <p>step 4 - <code>name: Build English docs</code>: To build the <code>English</code> documentation.</p> <ul> <li>It changes to the <code>mydocs-en</code> directory and runs mkdocs build.</li> <li><code>--site-dir ../site</code> option specifies where to output the built site.</li> </ul> </li> <li> <p>step  5 - <code>name: Build Chinese docs</code>: To build the <code>Chinese</code> documentation.</p> <ul> <li>It's similar to the English build, but outputs to <code>../site/zh-TW</code>.</li> </ul> </li> <li> <p>step 6 - <code>name: Create .nojekyll file</code>: To create an empty <code>.nojekyll</code> file.</p> <ul> <li>This file tells <code>GitHub Pages</code> not to process the site with <code>Jekyll</code>.</li> </ul> </li> <li> <p>step 8 - <code>name: Deploy</code>: To deploy the built site to <code>GitHub Pages</code>.</p> <ul> <li>It uses the <code>peaceiris/actions-gh-pages@v3</code> action for deployment.</li> <li><code>github_token: ${{ secrets.GITHUB_TOKEN }}</code>: This uses the built-in <code>GITHUB_TOKEN</code> for authentication.</li> <li><code>publish_dir: ./site</code>: This specifies the directory to publish.</li> <li><code>force_orphan: true</code>: This option ensures a clean deployment by removing the history of the <code>gh-pages</code> branch.</li> </ul> </li> </ul> </li> <li> <p>Commit and push this workflow file: <pre><code>git add .\ngit commit -m \"Add GitHub Actions workflow for MkDocs deployment\"\ngit push -u origin main\n</code></pre> This workflow will automatically build and deploy both language versions of your documentation whenever you push changes to the <code>main</code> branch.</p> </li> </ol> <p>After setting up the workflow, your documentation will be available at:</p> <ul> <li>English version: \"https://YOUR_USERNAME.github.io/YOUR_REPO_NAME/en/\"</li> <li>Chinese version: https://YOUR_USERNAME.github.io/YOUR_REPO_NAME/zh-TW/</li> <li>Root URL (https://YOUR_USERNAME.github.io/YOUR_REPO_NAME/) will redirect to the English version</li> </ul>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/2025/01/11/build-multi-language-website-mkdocs-material.html#further-studies","title":"Further Studies","text":"<ul> <li>In the future, large language models(LLM) could be incorporated to automate the translation work between different language versions.</li> </ul>","tags":["mkdocs","multi-language","material","website"]},{"location":"blog/archive/2025.html","title":"2025","text":""},{"location":"tags.html","title":"Tags","text":""},{"location":"tags.html#material","title":"material","text":"<ul> <li>Build a Multi-language Website with Mkdocs Material Theme</li> </ul>"},{"location":"tags.html#mkdocs","title":"mkdocs","text":"<ul> <li>Build a Multi-language Website with Mkdocs Material Theme</li> </ul>"},{"location":"tags.html#multi-language","title":"multi-language","text":"<ul> <li>Build a Multi-language Website with Mkdocs Material Theme</li> </ul>"},{"location":"tags.html#website","title":"website","text":"<ul> <li>Build a Multi-language Website with Mkdocs Material Theme</li> </ul>"}]}